<?php

/**
 * @file
 */

use Gettext\Translation;
use Gettext\Translations;
use Gettext\Generators\Po;

/**
 * Implements hook_drush_command().
 */
function dkan_l10n_es_co_drush_command() {

  $common_desc = array(
    'skip-translated' => 'Skip translated string in DB.',
  );

  $dkan_l10n_es_co_default_directory_source = 'path/to/module/dkan_l10n_es_co/po/';

  $items['dkan-po-import'] = array(
    'aliases' => array('dkan-poimport'),
    'description' => 'Import po files (segregated by text group, using the dkan_l10n_es_co.%textgroup.po convension.) from the provided source directory.',
    'arguments' => array(
      'source-dir-path' => 'Where the source po files are located, default to ' . $dkan_l10n_es_co_default_directory_source,
    ),
    'options' => array(
      'text-groups' => 'Comma separated text groups. Limit the import those groups.',
    ),
    'drupal dependencies' => array('dkan_l10n_es_co'),
  );

  $items['dkan-po-import-variables'] = array(
    'aliases' => array('dkan-poimport-vars'),
    'description' => 'Import po variables file from the provided source directory.',
    'arguments' => array(
      'source-file-path' => 'Where the source po file is located.',
    ),
    'options' => array(),
    'drupal dependencies' => array('i18n_variable'),
  );

  $items['dkan-po-export-textgroups'] = array(
    'aliases' => array('dkan-poexport'),
    'description' => 'Export po files (segregated by text group, using the dkan_l10n_es_co.%textgroup.po convension.) from DB.',
    'arguments' => array(
      'destination-dir-path' => 'Destination directory where to process and generate per text group po files. Defaults to ' . $dkan_l10n_es_co_default_directory_source,
    ),
    'options' => array(),
    'drupal dependencies' => array('dkan_l10n_es_co'),
  );

  $items['dkan-po-export-variables'] = array(
    'aliases' => array('dkan-poexport-vars'),
    'description' => 'Export po files for multilinguale variables from DB.',
    'arguments' => array(
      'destination-dir-path' => 'Destination directory where to process and generate per text group po files. Defaults to ' . $dkan_l10n_es_co_default_directory_source,
    ),
    'drupal dependencies' => array('i18n_variable'),
  );

  $items['dkan-po-onefile-dump'] = array(
    'aliases' => array('dkan-ofdump'),
    'description' => 'Export a single po file from DB stripped from all the context and containing only strings with unique msgid.',
    'arguments' => array(
      'destination-file-path' => 'Destination file location of the dump po file.',
    ),
    'options' => array(),
    'drupal dependencies' => array('dkan_l10n_es_co'),
  );

  $items['dkan-po-onefile-process'] = array(
    'aliases' => array('dkan-ofprocess'),
    'description' => 'Process a single file generated by "dkan-po-onefile-dump" command to generate multiple po files (segregated by text group, using the dkan_l8n_es_co.%textgroup.po convension.) based on the available records from the DB.',
    'arguments' => array(
      'source-file-path' => 'Source file to process and generate per text group po files',
      'destination-dir-path' => 'Destination directory where to process and generate per text group po files. Defaults to ' . $dkan_l10n_es_co_default_directory_source,
    ),
    'options' => array(
      'include-variables' => 'Include variables from the "language" > "es" realm.',
    ),
    'drupal dependencies' => array('dkan_l10n_es_co'),
  );

  return $items;
}

/**
 * Import text groups po files.
 *
 * Import po files (segregated by text group, using the
 * dkan_l10n_es_co.%textgroup.po convension.) from the provided source
 * directory.
 */
function drush_dkan_l10n_es_co_dkan_po_import($source_dir_path = NULL) {
  // The function supports empty source dir.
  dkan_l10n_es_co_import_po_from_dir($source_dir_path);
  dkan_l10n_es_co_menu_links_update();
}

/**
 * Import variables po files.
 *
 * Import po files (segregated by text group, using the
 * dkan_l10n_es_co.%textgroup.po convension.) from the provided source
 * directory.
 */
function drush_dkan_l10n_es_co_dkan_po_import_variables($source_file_path = NULL) {
  $realm_name = 'language';
  $realm_key = DKAN_L10N_ES_CO_LANGCODE;

  if (!file_exists($source_file_path)) {
    return drush_set_error('dkan_l10n_es_co', dt("Failed to find source file '" . $source_file_path . "'. Quitting."));
  }

  // Import from a .po file:
  $variables_translations = Translations::fromPoFile($source_file_path);

  $controller = variable_realm_controller($realm_name);

  $variables = array();

  foreach ($variables_translations as $translation) {
    $variables[$translation->getContext()] = $translation->getTranslation();
    variable_realm_set($realm_name, $realm_key, $translation->getContext(), $translation->getTranslation());
  }
  $controller->addStore($realm_key, $variables);

  $variables = array_keys(array_filter($variables));

  // Apply some transformation to the variables keys.
  $variables = array_map(function ($key) {
    if (strpos($key, 'user_mail_') === 0) {
      $key = preg_replace("/(.*)_.*/", "$1_[mail_part]", $key);
    }

    return $key;
  }, $variables);

  $variables = array_unique($variables);

  $controller->setRealmVariable('list', $variables);
}

/**
 * Export text groups po files from DB.
 *
 * Export po files (segregated by text group, using the
 * dkan_l10n_es_co.%textgroup.po convension.) from DB.
 */
function drush_dkan_l10n_es_co_dkan_po_export_textgroups($destination_dir_path = NULL) {
  if (!$destination_dir_path) {
    $destination_dir_path = dkan_l10n_es_co_default_directory_source();
  }

  if (!file_exists($destination_dir_path)) {
    if (!mkdir($destination_dir_path)) {
      return drush_set_error('dkan_l10n_es_co', dt("Failed to create directory '" . $destination_dir_path . "'. Quitting."));
    }
  }

  $headers_array = dkan_l10n_es_co_po_headers_array();

  foreach (dkan_l10n_es_co_textgroups_list() as $textgroup) {
    if ($textgroup == 'default') {
      continue;
    }

    $resultset = dkan_l10n_es_co_db_query_locales($textgroup, NULL);
    dkan_l10n_es_co_resultset2po($resultset, $textgroup, $destination_dir_path, $headers_array);
    drush_print("Written po file for the \"" . $textgroup . "\" text group containing " . count($resultset) . " entries.");
  }

  $resultset = dkan_l10n_es_co_db_query_locales('default', FALSE, "%dkan%");
  dkan_l10n_es_co_resultset2po($resultset, 'default', $destination_dir_path, $headers_array);
  drush_print("Written po file for the \"" . "default" . "\" text group containing " . count($resultset) . " entries.");

  drush_print();
  drush_print("Total of " . count(dkan_l10n_es_co_textgroups_list()) . " po file(s) generated.");
}

/**
 * Export variables po files from DB.
 *
 * Export po files (segregated by text group, using the
 * dkan_l10n_es_co.%textgroup.po convension.) from DB.
 */
function drush_dkan_l10n_es_co_dkan_po_export_variables($destination_dir_path = NULL) {
  if (!$destination_dir_path) {
    $destination_dir_path = dkan_l10n_es_co_default_directory_source();
  }
  elseif (!file_exists($destination_dir_path)) {
    if (!mkdir($destination_dir_path)) {
      return drush_set_error('dkan_l10n_es_co', dt("Failed to create directory '" . $destination_dir_path . "'. Quitting."));
    }
  }

  // Get the variables from the "languages" realm with the
  // DKAN_L10N_ES_CO_LANGCODE key.
  $variables = variable_realm('language', DKAN_L10N_ES_CO_LANGCODE)->variable_list();

  if (empty($variables)) {
    drush_print(sprintf("No variables found in the \"%s\" realm key.", DKAN_L10N_ES_CO_LANGCODE));
    return;
  }
  else {
    drush_print(sprintf("Found %d items.", count($variables)));
  }

  $resultset = array();
  foreach ($variables as $name => $value) {
    if (!empty($value)) {
      // Make sure we have a source string to translate.
      $record = new stdClass();
      $record->context = $name;
      $record->source = $value;
      $record->tagret = NULL;
      $record->location = NULL;

      $resultset[$name] = $record;
    }
  }

  $headers_array = dkan_l10n_es_co_po_headers_array();

  dkan_l10n_es_co_resultset2po($resultset, 'variables', $destination_dir_path, $headers_array);
  drush_print();
  drush_print(sprintf("Written po file for the multilingual variables containing %d (non empty) entries.", count($resultset)));
}

/**
 * Export a single po file from DB.
 *
 * Export a single po file from DB stripped from all the context and containing
 * only strings with unique msgid.
 */
function drush_dkan_l10n_es_co_dkan_po_onefile_dump($destination_file_path = NULL) {
  if (!$destination_dir_path) {
    $destination_dir_path = dkan_l10n_es_co_default_directory_source();
  }

  if (!file_exists($destination_dir_path)) {
    if (!mkdir($destination_dir_path)) {
      return drush_set_error('dkan_l10n_es_co', dt("Failed to create directory '" . $destination_dir_path . "'. Quitting."));
    }
  }

  $headers_array = dkan_l10n_es_co_po_headers_array();

  $resultset_notdefault = array();

  foreach (dkan_l10n_es_co_textgroups_list() as $textgroup) {
    if ($textgroup == 'default') {
      continue;
    }

    $resultset = dkan_l10n_es_co_db_query_locales($textgroup, NULL);
    drush_print();
    drush_print(sprintf("Fetched %s text group: %d strings.", $textgroup, count($resultset)));

    $resultset_notdefault = array_merge($resultset, $resultset_notdefault);
  }

  $resultset_default = dkan_l10n_es_co_db_query_locales('default', FALSE, "%dkan%");
  drush_print();
  drush_print(sprintf("Fetched %s text group: %d strings.", 'default', count($resultset_default)));

  // Compute the diff of the resultsets.
  $coll = collator_create('en_US');

  $resultset_diff = array_udiff($resultset_default, $resultset_notdefault, function ($a, $b) use ($coll) {
    return collator_compare($coll, $a->source, $b->source);
  });
  drush_print();
  drush_print(sprintf("Unique source strings count: %d.", count($resultset_diff)));

  // Compute the intersection of the resultsets.
  $resultset_intersection = array_uintersect($resultset_default, $resultset_notdefault, function ($a, $b) use ($coll) {
    return collator_compare($coll, $a->source, $b->source);
  });
  drush_print();
  drush_print(sprintf("Shared source strings: %d.", count($resultset_intersection)));

  $resultset = array_merge($resultset_default, $resultset_notdefault);
  drush_print();
  drush_print(sprintf("Total source strings to include in the dump file count: %s", count($resultset)));

  $headers_array = dkan_l10n_es_co_po_headers_array();

  $translations = new Translations();

  // Setup PO file headers.
  foreach ($headers_array as $header_key => $header_value) {
    $translations->setHeader($header_key, $header_value);
  }

  foreach ($resultset as $record) {
    $translation = new Translation(NULL, $record->source);

    if ($record->location) {
      $translation->addComment($record->location);
    }

    if ($record->target) {
      $translation->setTranslation($record->target);
    }

    $translations[] = $translation;
  }

  // Write the PO file.
  Po::toFile($translations, $destination_dir_path . '/dkan_l10n_es_co.onefile.po');
  drush_print();
  drush_print("Written po dump file: " . $destination_dir_path . '/dkan_l10n_es_co.onefile.po');
}

/**
 * Process a file generated by "dkan-po-onefile-dump" to  multiple po files.
 *
 * Process a single file generated by "dkan-po-onefile-dump" command to generate
 * multiple po files (segregated by text group, using the
 * dkan_l8n_es_co.%textgroup.po convension.) based on the available records from
 * the DB.
 */
function drush_dkan_l10n_es_co_dkan_po_onefile_process($source_file_path = NULL, $destination_dir_path = NULL) {
  if (!isset($source_file_path)) {
    $source_file_path = dkan_l10n_es_co_default_directory_source() . 'dkan_l10n_es_co.onefile.po';
  }

  if (!isset($destination_dir_path)) {
    $destination_dir_path = dkan_l10n_es_co_default_directory_source();
  }

  if (!file_exists($destination_dir_path)) {
    if (!mkdir($destination_dir_path)) {
      return drush_set_error('dkan_l10n_es_co', dt("Failed to create directory '" . $destination_dir_path . "'. Quitting."));
    }
  }

  // Import from a .po file:
  $onefile_translations = Translations::fromPoFile($source_file_path);

  $headers_array = dkan_l10n_es_co_po_headers_array();

  $msg_format = "[Textgroup Status] Processed translation string(s) for %s textgroup: %d found / %d total (%d %%)";

  foreach (dkan_l10n_es_co_textgroups_list() as $textgroup) {
    if ($textgroup == 'default') {
      // Default textgroup have additional params.
      $resultset = dkan_l10n_es_co_db_query_locales('default', TRUE, "%dkan%");
    }
    else {
      $resultset = dkan_l10n_es_co_db_query_locales($textgroup);
    }

    // Update the textgroup resultset with translation from the onefile.
    $translated_count = 0;
    foreach ($resultset as &$record) {
      $translation = $onefile_translations->find(NULL, $record->source);

      if (is_a($translation, 'Gettext\Translation') && !empty($translation->getTranslation())) {
        $record->target = $translation->getTranslation();
        $translated_count++;
      }
      else {
        drush_print(sprintf("Failed to find source for the \"%s\" source string.", $record->source));
      }
    }

    $percent = count($resultset) == 0 ? "N/A" : ($translated_count * 100 / count($resultset));
    drush_print(sprintf($msg_format, $textgroup, $translated_count, count($resultset), $percent));

    dkan_l10n_es_co_resultset2po($resultset, $textgroup, $destination_dir_path, $headers_array);
    drush_print("Written po file for the \"" . $textgroup . "\" text group containing " . count($resultset) . " entries.");
    drush_print();
  }
}

/**
 * Query the database to get the locales strings.
 *
 * @return mixed
 *   Drupal SQL query ResultSet.
 */
function dkan_l10n_es_co_db_query_locales($textgroup = NULL, $translated = FALSE, $filter_metadata = "") {
  $query = db_select('locales_source', 's');

  $query->fields('s', array('lid', 'location', 'source', 'context'));

  if ($textgroup) {
    $query->condition('s.textgroup', $textgroup);
  }

  // Add the "locales_target" table as a left join.
  if ($translated || !empty($filter_metadata)) {
    $query->leftJoin('locales_target', 't',
      's.lid = t.lid AND t.language = :language',
      array(":language" => DKAN_L10N_ES_CO_LANGCODE));

    $query->addField('t', 'translation', 'target');

    if ($translated === TRUE) {
      $or_translated = db_or();
      $or_translated->isNotNull('t.translation');
      $or_translated->condition('t.translation', "", "<>");

      $query->condition($or_translated);
    }
    elseif ($translated === FALSE) {
      $or_translated = db_or();
      $or_translated->isNull('t.translation');
      $or_translated->condition('t.translation', "");

      $query->condition($or_translated);
    }

    if (!empty($filter_metadata)) {
      $or_string_filter = db_or();
      $or_string_filter->condition('s.context', $filter_metadata, 'LIKE');
      $or_string_filter->condition('s.location', $filter_metadata, 'LIKE');

      $query->condition($or_string_filter);
    }
  }

  return $query->execute()
    ->fetchAllAssoc('lid');
}

/**
 * Write PO file from db resultset.
 */
function dkan_l10n_es_co_resultset2po($resultset, $textgroup, $destination_dir, $headers_array = array()) {

  $translations = new Translations();

  // Setup PO file headers.
  foreach ($headers_array as $header_key => $header_value) {
    $translations->setHeader($header_key, $header_value);
  }

  foreach ($resultset as $record) {
    $translation = new Translation($record->context, $record->source);

    if ($record->location) {
      $translation->addComment($record->location);
    }

    if ($record->target) {
      $translation->setTranslation($record->target);
    }

    $translations[] = $translation;
  }

  // Write the PO file.
  return Po::toFile($translations, $destination_dir . '/dkan_l10n_es_co.' . $textgroup . '.po');
}

/**
 * Construct an array with PO file header as key value pairs.
 */
function dkan_l10n_es_co_po_headers_array($time = NULL) {
  if (!isset($time)) {
    $time = date('c');
  }

  $po_headers = array(
    'Project-Id-Version' => 'dkan_l10n_es_co-7.x.1.x',
    'Language' => 'es_CO',
  );

  if ($time) {
    $po_headers = array_merge($po_headers, array(
      'POT-Creation-Date' => $time,
      'PO-Revision-Date' => $time,
    ));
  }

  return $po_headers;
}
